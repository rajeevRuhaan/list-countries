{"version":3,"sources":["components/Header.tsx","api/Api.tsx","constant/index.tsx","redux/country/action.tsx","redux/favorite/action.tsx","components/Loading.tsx","components/Error.tsx","components/country/SingleCountry.tsx","page/CountryPage.tsx","components/SearchCountry.tsx","components/countries/TableHead.tsx","components/countries/TableBody.tsx","components/countries/Index.tsx","components/Sort.tsx","redux/sort/action.tsx","page/CountriesPage.tsx","components/favoriteCountriesList/FavoriteList.tsx","components/favoriteCountriesList/Favorite.tsx","page/FavoriteCountriesPage.tsx","redux/countries/action.tsx","App.tsx","redux/countries/reducer.tsx","redux/country/reducer.tsx","redux/favorite/reducer.tsx","redux/sort/reducer.tsx","redux/combineReducers.tsx","redux/store.tsx","index.tsx"],"names":["Header","favLength","useSelector","state","favorite","length","colorMode","useContext","ColorModeContext","theme","useTheme","Box","sx","display","height","justifyContent","alignItems","padding","color","backgroundColor","className","style","textDecoration","to","Typography","fontSize","width","Badge","badgeContent","IconButton","onClick","toggleColorMode","palette","mode","baseUrl","getCountriesList","value","a","axios","get","response","data","getCountry","country","FETCHING_COUNTRIES","FETCH_COUNTRIES_SUCCESS","FETCH_COUNTRIES_ERROR","FETCHING_COUNTRY","FETCH_COUNTRY_SUCCESS","FETCH_COUNTRY_ERROR","ADD_FAVORITE","REMOVE_FAVORITE","NO_SORT","SORT_NAME_ASC","SORT_NAME_DES","SORT_POPULATION_ASC","SORT_POPULATION_DES","SORT_REGION_ASC","SORT_REGION_DES","fetchCountrySuccess","type","payload","fetchCountryError","error","addFavorite","countryName","removeFavorite","Loading","Alert","severity","AlertTitle","CircularProgress","Error","err","Stack","spacing","SingleCountry","name","useParams","navigate","useNavigate","dispatch","useDispatch","loading","useEffect","fetchCountry","Paper","Container","maxWidth","Card","CardMedia","component","image","flags","png","alt","Grid","variant","common","favoriteCountry","includes","Accordion","AccordionSummary","expandIcon","AccordionDetails","capital","Object","values","nativeName","undefined","currencies","languages","map","language","borders","border","timezones","timezone","CardActions","Button","size","CountryPage","SearchCountry","setInputValue","position","zIndex","right","top","TextField","id","margin","label","onChange","e","userInput","target","titles","TableHead","TableRow","title","TableCell","align","TableBody","countries","page","rowsPerPage","inputText","sortBy","sort","sortCountries","useCallback","b","population","region","filter","listCountries","toLowerCase","slice","scope","src","keys","lang","listStyle","Index","useState","setPage","setRowsPerPage","TableContainer","Table","minWidth","TableFooter","TablePagination","rowsPerPageOptions","colSpan","count","SelectProps","inputProps","native","onPageChange","event","newPage","onRowsPerPageChange","parseInt","Sort","handleSort","sortAction","FormControl","fullWidth","InputLabel","Select","labelId","MenuItem","CountriesPage","setInputText","FavoriteList","favoriteList","console","log","container","direction","item","xs","Favorite","CardContent","textAlign","FavoriteCountriesPage","fetchCountriesSuccess","fetchCountriesError","createContext","App","setMode","useMemo","prevMode","createTheme","Provider","ThemeProvider","path","element","initialState","reducer","action","newfavorite","rootReducer","combineReducers","countriesReducer","countryReducer","favoriteReducer","sortReducer","storeFactory","favoriteLists","localStorage","getItem","JSON","parse","store","createStore","composeWithDevTools","applyMiddleware","thunk","subscribe","getState","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1c762e2.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ColorModeContext } from \"../App\";\r\nimport {InitialState} from './../redux/store'\r\n\r\n// components mui\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport Brightness4Icon from \"@mui/icons-material/Brightness4\";\r\nimport Brightness7Icon from \"@mui/icons-material/Brightness7\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { Box, Typography } from \"@mui/material\";\r\nimport { Favorite } from \"@material-ui/icons\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport { Badge } from \"@material-ui/core\";\r\n\r\nconst Header = () => {\r\n  const favLength = useSelector((state: InitialState) => state.favorite.favorite.length);\r\n  const colorMode = useContext(ColorModeContext);\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        height: \"75px\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\",\r\n        padding: \"0 100px\",\r\n        color: \"blue\",\r\n        backgroundColor: \"skyblue\",\r\n      }}\r\n    >\r\n      <div className=\"container-left\" style={{ textDecoration: \"none\" }}>\r\n        <Link to=\"/\" style={{ textDecoration: \"none\" }}>\r\n          <Typography sx={{ fontSize: 30 }}>Countries Info.</Typography>\r\n        </Link>\r\n      </div>\r\n      <div\r\n        className=\"container-right\"\r\n        style={{\r\n          display: \"block\",\r\n          width: \"200px\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-around\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div>\r\n            <Link to=\"/\">\r\n              <HomeIcon  />\r\n            </Link>\r\n          </div>\r\n          <Badge badgeContent={favLength} color=\"secondary\">\r\n            <Link to=\"/favorites\">\r\n              <Favorite />\r\n            </Link>\r\n          </Badge>\r\n\r\n          <IconButton sx={{ width: 40, height: 40 }} onClick={colorMode.toggleColorMode}>\r\n            {theme.palette.mode === \"dark\" ? (\r\n              <Brightness7Icon />\r\n            ) : (\r\n              <Brightness4Icon />\r\n            )}\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"https://restcountries.com/v3.1\";\r\n\r\nexport const getCountriesList = async (value : string) => {\r\n  let response = await axios.get(`${baseUrl}/${value}`);\r\n  return response.data;\r\n};\r\n\r\nexport const getCountry = async (country: string) => {\r\n  let response = await axios.get(`${baseUrl}/name/${country}?fullText=true`);\r\n  return response.data;\r\n};\r\n","export const FETCHING_COUNTRIES = \"FETCHING_COUNTRIES\";\r\nexport const FETCH_COUNTRIES_SUCCESS = \"FETCH_COUNTRIES_SUCCESS\";\r\nexport const FETCH_COUNTRIES_ERROR = \"FETCH_COUNTRIES_ERROR\";\r\n\r\n//\r\nexport const FETCHING_COUNTRY = \"FETCH_COUNTRY\";\r\nexport const FETCH_COUNTRY_SUCCESS = \"FETCH_COUNTRY_SUCCESS\";\r\nexport const FETCH_COUNTRY_ERROR = \"FETCH_COUNTRY_ERROR\";\r\n\r\n//\r\nexport const ADD_FAVORITE = \"ADD_FAVORITE\";\r\nexport const REMOVE_FAVORITE = \"REMOVE_FAVORITE\";\r\n\r\n//\r\nexport const NO_SORT = \"NO_SORT\";\r\nexport const SORT_NAME_ASC = \"SORT_NAME_ASC\";\r\nexport const SORT_NAME_DES = \"SORT_NAME_DES\";\r\nexport const SORT_POPULATION_ASC = \"SORT_POPULATION_ASC\";\r\nexport const SORT_POPULATION_DES = \"SORT_POPULATION_DES\";\r\nexport const SORT_REGION_ASC = \"SORT_REGION_ASC\";\r\nexport const SORT_REGION_DES = \"SORT_REGION_DES\";\r\n","import { getCountry } from \"../../api/Api\";\r\nimport { Dispatch } from \"redux\";\r\nimport {\r\n  FETCHING_COUNTRY,\r\n  FETCH_COUNTRY_SUCCESS,\r\n  FETCH_COUNTRY_ERROR,\r\n} from \"../../constant\";\r\nimport {Country, Error} from '../../types'\r\n\r\n\r\nexport const fetchCountry = (country: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: FETCHING_COUNTRY,\r\n      });\r\n      const data = await getCountry(country);\r\n      dispatch(fetchCountrySuccess(data));\r\n    } catch (error: any) {\r\n      dispatch(fetchCountryError(error));\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchCountrySuccess = (data: Country[]) => {\r\n  return {\r\n    type: FETCH_COUNTRY_SUCCESS,\r\n    payload: data,\r\n   \r\n  };\r\n};\r\n\r\nexport const fetchCountryError = (error: Error) => {\r\n  return {\r\n    type: FETCH_COUNTRY_ERROR,\r\n    payload: error,\r\n  };\r\n};\r\n\r\ntype FetchCountryAction = {\r\n  type: typeof FETCHING_COUNTRY,\r\n}\r\ntype FetchCountrySuccessAction = {\r\n  type: typeof FETCH_COUNTRY_SUCCESS,\r\n  payload: Country[]\r\n}\r\ntype FetchCountryErrorAction = {\r\n  type: typeof FETCH_COUNTRY_ERROR,\r\n  payload: string\r\n}\r\n\r\nexport type Actions = FetchCountryAction | FetchCountrySuccessAction |FetchCountryErrorAction\r\n\r\n","import { ADD_FAVORITE, REMOVE_FAVORITE } from \"../../constant\";\r\n\r\nexport const addFavorite = (countryName: string): AddFavoriteAction => {\r\n  return {\r\n    type: ADD_FAVORITE,\r\n    payload: countryName,\r\n  };\r\n};\r\n\r\nexport const removeFavorite = (countryName: string): RemoveFavoriteAction => {\r\n  return { type: REMOVE_FAVORITE, payload: countryName };\r\n};\r\n\r\ntype AddFavoriteAction = {\r\n  type: typeof ADD_FAVORITE,\r\n  payload: string\r\n}\r\ntype RemoveFavoriteAction = {\r\n  type: typeof REMOVE_FAVORITE,\r\n  payload: string\r\n}\r\n\r\nexport type Actions =AddFavoriteAction | RemoveFavoriteAction","import React from \"react\";\r\nimport { Box, CircularProgress, Alert, AlertTitle } from \"@mui/material\";\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <Box sx={{ width: \"100%\" }} >\r\n      <Alert severity=\"info\">\r\n        <AlertTitle>Loading...</AlertTitle>\r\n        <CircularProgress />\r\n      </Alert>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\n\r\nimport { Stack, Alert, AlertTitle } from \"@mui/material\";\r\n\r\nconst Error = ({ err }: {err: string}) => {\r\n  return (\r\n    <Stack sx={{ width: \"100%\" }} spacing={2}>\r\n      <Alert severity=\"error\">\r\n        <AlertTitle>{err}</AlertTitle>\r\n      </Alert>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default Error;\r\n","import React, {useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { fetchCountry } from '../../redux/country/action';\r\nimport { InitialState } from '../../redux/store';\r\nimport { addFavorite, removeFavorite } from \"../../redux/favorite/action\";\r\nimport Loading from '../Loading';\r\nimport Error from '../Error';\r\n\r\nimport Card from '@mui/material/Card'\r\nimport CardActions from '@mui/material/CardActions'\r\nimport CardMedia  from '@mui/material/CardMedia';\r\nimport Container from '@mui/material/Container'\r\nimport Paper from '@mui/material/Paper'\r\nimport Button from '@mui/material/Button'\r\nimport Grid from '@mui/material/Grid'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport Typography from '@mui/material/Typography';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\n\r\nconst SingleCountry = () => {\r\n    const name = useParams().country;\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const {country, loading, error} = useSelector((state: InitialState) => state.country);\r\n    const favorite = useSelector((state: InitialState) => state.favorite.favorite)\r\n\r\n    useEffect(()=> {\r\n        dispatch(fetchCountry(name as string))\r\n    }, [dispatch, name])\r\n\r\n   \r\n    const handleFavorite = (favoriteCountry: string) => {\r\n        if (favorite.includes(favoriteCountry)) {\r\n          dispatch(removeFavorite(favoriteCountry));\r\n        } else {\r\n          dispatch(addFavorite(favoriteCountry));\r\n        }\r\n      };\r\n\r\n    if (loading) {\r\n        return <Loading />;\r\n      } else if (error) {\r\n        return <Error err={error} />;\r\n      }\r\n    return (\r\n        <Paper >\r\n            {country.length > 0 && (\r\n                <Container maxWidth=\"sm\" >\r\n                    <Card sx={{maxWidth: 550}}>\r\n                        <CardMedia  \r\n                        component = \"img\" \r\n                        height=\"150\"\r\n                        image = {country[0].flags.png} \r\n                        alt = \"country flag\"/>\r\n                    <Grid sx={{display: \"flex\", justifyContent: \"space-between\" }}>\r\n                        <Grid><Typography variant=\"h5\" >{country[0].name.common}</Typography></Grid>\r\n                        <Grid>  \r\n                            <IconButton\r\n                            onClick={() => handleFavorite(country[0].name.common)}\r\n                            >\r\n                                <FavoriteIcon\r\n                                    style={{\r\n                                    color: favorite.includes(country[0].name.common)\r\n                                        ? \"red\"\r\n                                        : \"black\",\r\n                                    }}\r\n                                />\r\n                            </IconButton> \r\n                        </Grid>\r\n                    </Grid>\r\n                    <Accordion>\r\n                        <AccordionSummary  expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography>Capital</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <Typography>{country[0].capital}</Typography>\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Accordion>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography>NativeName</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <Typography>{Object.values(country[0].name.nativeName)[0].common}</Typography>\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Accordion>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography>Currencies</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <Typography>{country[0].currencies !== undefined &&\r\n                            Object.values(country[0].currencies)[0].name}</Typography>\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Accordion>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography>Languages</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <Typography>{country[0].languages !== undefined &&\r\n                                Object.values(country[0].languages).map((language) => {\r\n                                    return <div key={language}>{language}</div>;\r\n                                })}</Typography>\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Accordion>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography>Borders</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <Typography>{country[0].borders !== undefined &&\r\n                            country[0].borders.map((border) => (\r\n                                <div key={border}>{border}</div>\r\n                            ))}</Typography>\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Accordion>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography>Time Zones</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <Typography>{country[0].timezones.map((timezone) => (\r\n                            <span key={timezone}>{timezone} </span>\r\n                            ))}</Typography>\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <CardActions sx={{ justifyContent: \"center\" }}>\r\n                        <Button variant=\"contained\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                            navigate(\"/\");\r\n                            }}\r\n                        >\r\n                            Back Button\r\n                        </Button>\r\n                    </CardActions>\r\n                    </Card>\r\n                </Container>\r\n            )}      \r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default SingleCountry;","import  Box  from \"@mui/material/Box\";\r\n// components\r\nimport Header from \"../components/Header\";\r\nimport SingleCountry from \"../components/country/SingleCountry\";\r\n\r\nconst CountryPage = () => {\r\n  return (\r\n    <Box sx={{height: '100vh', width: '100%'}}>\r\n        <Header />\r\n        <SingleCountry />\r\n    </Box>\r\n  ) \r\n};\r\n\r\nexport default CountryPage;\r\n","import React from \"react\";\r\n\r\nimport TextField from \"@mui/material/TextField\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\n\r\ntype SetInputValueProps = {\r\n  setInputValue: (value:string) => void\r\n}\r\n\r\nconst SearchCountry = ({ setInputValue }: SetInputValueProps)  => {\r\n  \r\n  const handleInput = (userInput: string ) => {\r\n    setInputValue(userInput);\r\n  };\r\n  return (\r\n    <div className=\"search-area\">\r\n      <h1>Welcome</h1>\r\n      <h3 style={{ fontSize: \"30px\" }}>LIST OF COUNTRIRES !</h3>\r\n      <div style={{ position: \"relative\", display: \"inline-block\" }}>\r\n        <SearchIcon\r\n          sx={{ zIndex: \"tooltip\" }}\r\n          style={{\r\n            position: \"absolute\",\r\n            right: 40,\r\n            top: 35,\r\n            width: 20,\r\n            height: 20,\r\n          }}\r\n        />\r\n        <TextField\r\n          id=\"fullWidth\"\r\n          sx={{ margin: 2, width: \"500px\" }}\r\n          label=\"Search country by name!\"\r\n          variant=\"outlined\"\r\n          onChange={(e) => handleInput(e.target.value)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchCountry;\r\n","import React from \"react\";\r\n// material ui components\r\nimport MuiTableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\n\r\nconst titles = [\r\n  \"FLAG\",\r\n  \"NAME\",\r\n  \"POPULATION\",\r\n  \"REGION\",\r\n  \"LANGUAGES\",\r\n  \"FAVOURITES\",\r\n];\r\n\r\nconst TableHead = () => {\r\n  return (\r\n    <MuiTableHead>\r\n      <TableRow>\r\n        {titles.map((title) => {\r\n          return (\r\n            <TableCell align=\"center\" key={title}>\r\n              {title}\r\n            </TableCell>\r\n          );\r\n        })}\r\n      </TableRow>\r\n    </MuiTableHead>\r\n  );\r\n};\r\n\r\nexport default TableHead;\r\n","import React, { useCallback } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addFavorite, removeFavorite } from \"../../redux/favorite/action\";\r\nimport {InitialState} from '../../redux/store'\r\nimport { Countries } from \"../../types\";\r\n\r\n// import mui components\r\nimport MuiTableBody from \"@mui/material/TableBody\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\n// material ui icon\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\n\r\ntype TableBodyProps = {\r\n  countries: Countries[],\r\n  page: number,\r\n  rowsPerPage: number,\r\n  inputText: string\r\n}\r\n\r\nconst TableBody = ({ countries, page, rowsPerPage, inputText }: TableBodyProps) => {\r\n  const dispatch = useDispatch();\r\n  const favorite = useSelector((state: InitialState) => state.favorite.favorite);\r\n  //sorting action\r\n  const sortBy = useSelector((state: InitialState) => state.sort.sortBy);\r\n\r\n  const sortCountries = useCallback(() => {\r\n    if (sortBy === \"populationDes\") {\r\n      return [...countries].sort((a, b) =>\r\n        b.population < a.population ? -1 : b.population > a.population ? 1 : 0\r\n      );\r\n    } else if (sortBy === \"populationAsc\") {\r\n      return [...countries].sort((a, b) =>\r\n        b.population < a.population ? 1 : b.population > a.population ? -1 : 0\r\n      );\r\n    } else if (sortBy === \"nameAsc\") {\r\n      return [...countries].sort((a, b) =>\r\n        b.name.common < a.name.common\r\n          ? 1\r\n          : b.name.common > a.name.common\r\n          ? -1\r\n          : 0\r\n      );\r\n    } else if (sortBy === \"nameDes\") {\r\n      return [...countries].sort((a, b) =>\r\n        b.name.common < a.name.common\r\n          ? -1\r\n          : b.name.common > a.name.common\r\n          ? 1\r\n          : 0\r\n      );\r\n    } else if (sortBy === \"regionDes\") {\r\n      return [...countries].sort((a, b) =>\r\n        b.region < a.region ? -1 : b.region > a.region ? 1 : 0\r\n      );\r\n    } else if (sortBy === \"regionAsc\") {\r\n      return [...countries].sort((a, b) =>\r\n        b.region < a.region ? 1 : b.region > a.region ? -1 : 0\r\n      );\r\n    } else \r\n      return [...countries];\r\n  }, [countries, sortBy]);\r\n\r\n  const handleFavoriteCountry = (favoriteCountry: string) => {\r\n    if (favorite.includes(favoriteCountry)) {\r\n      dispatch(removeFavorite(favoriteCountry));\r\n    } else {\r\n      dispatch(addFavorite(favoriteCountry));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MuiTableBody>\r\n      {sortCountries\r\n        ? sortCountries()\r\n            .filter((listCountries) => {\r\n              if (inputText === \"\") {\r\n                return listCountries;\r\n              } else {\r\n                return listCountries.name.common\r\n                  .toLowerCase()\r\n                  .includes(inputText.toLowerCase());\r\n              }\r\n            })\r\n            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            .map((country) => {\r\n              return (\r\n                <TableRow key={country.name.common}>\r\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                    <img src={country.flags.png} alt=\"country flag\" />\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Link\r\n                      className=\"country-name-link\"\r\n                      to={`/country/${country.name.common}`}\r\n                    >\r\n                      {country.name.common}\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">{country.population}</TableCell>\r\n                  <TableCell align=\"center\">{country.region}</TableCell>\r\n                  <TableCell align=\"center\">\r\n                    {country.languages &&\r\n                    Object.keys(country.languages).length > 0\r\n                      ? Object.values(country.languages).map((lang) => {\r\n                          return (\r\n                            <li key={lang} style={{ listStyle: \"none\" }}>\r\n                              {lang}\r\n                            </li>\r\n                          );\r\n                        })\r\n                      : \"N/A\"}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <button\r\n                      onClick={() => handleFavoriteCountry(country.name.common)}\r\n                    >\r\n                      <FavoriteIcon\r\n                        style={{\r\n                          color: favorite.includes(country.name.common)\r\n                            ? \"red\"\r\n                            : \"black\",\r\n                        }}\r\n                      />\r\n                    </button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })\r\n        : \"N/A\"}\r\n    </MuiTableBody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","import React, {useState} from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n//material ui components\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  Paper,\r\n  TableFooter,\r\n  TableRow,\r\n  TablePagination,\r\n} from \"@mui/material\";\r\n\r\n//import components\r\nimport TableHead from \"./TableHead\";\r\nimport TableBody from \"./TableBody\";\r\nimport Error from \"../Error\";\r\nimport Loading from \"../Loading\";\r\nimport { InitialState } from \"../../redux/store\";\r\n\r\ntype InputTextProps = {\r\n  inputText: string\r\n}\r\n\r\nconst Index = ({ inputText }: InputTextProps) => {\r\n  const countries = useSelector((state: InitialState) => state.countries.countries);\r\n  const loading = useSelector((state: InitialState) => state.countries.loading);\r\n  const error = useSelector((state: InitialState) => state.countries.error);\r\n\r\n  //pagination\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  const handleChangePage = (event: unknown, newPage: number ) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  if (loading) {\r\n    return <Loading />;\r\n  } else if (error) {\r\n    return <Error err={error} />;\r\n  }\r\n  return (\r\n    <Paper>\r\n      <TableContainer>\r\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n          <TableHead />\r\n          <TableBody\r\n            countries={countries}\r\n            page={page}\r\n            rowsPerPage={rowsPerPage}\r\n            inputText={inputText}\r\n          />\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: -1 }]}\r\n                colSpan={3}\r\n                count={countries ? countries.length : 0}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: {\r\n                    \"aria-label\": \"rows per page\",\r\n                  },\r\n                  native: true,\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport {InitialState} from './../redux/store'\r\nimport {\r\n  noSort,\r\n  sortNameAsc,\r\n  sortNameDes,\r\n  sortPopulationDes,\r\n  sortPopulationAsc,\r\n  sortRegionAsc,\r\n  sortRegionDes,\r\n} from \"../redux/sort/action\";\r\n\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\n\r\nconst Sort = () => {\r\n  const dispatch = useDispatch();\r\n  const sort = useSelector((state: InitialState) => state.sort.sortBy);\r\n\r\n  const handleSort = (sortAction: string) => {\r\n    if (sortAction === \"\") {\r\n      return dispatch(noSort());\r\n    } else if (sortAction === \"populationAsc\") {\r\n      return dispatch(sortPopulationAsc());\r\n    } else if (sortAction === \"populationDes\") {\r\n      return dispatch(sortPopulationDes());\r\n    } else if (sortAction === \"nameAsc\") {\r\n      return dispatch(sortNameAsc());\r\n    } else if (sortAction === \"nameDes\") {\r\n      return dispatch(sortNameDes());\r\n    } else if (sortAction === \"regionAsc\") {\r\n      return dispatch(sortRegionAsc());\r\n    } else if (sortAction === \"regionDes\") {\r\n      return dispatch(sortRegionDes());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormControl fullWidth>\r\n      <InputLabel id=\"sort by select\">sort</InputLabel>\r\n      <Select\r\n        labelId=\"sort by select\"\r\n        id=\"demo-simple-select\"\r\n        value={sort}\r\n        label=\"Sort\"\r\n        onChange={(e) => {\r\n          handleSort(e.target.value);\r\n        }}\r\n      >\r\n        <MenuItem value={\"\"}>\r\n          <em>None</em>\r\n        </MenuItem>\r\n        <MenuItem value={\"populationDes\"}>Population ↓</MenuItem>\r\n        <MenuItem value={\"populationAsc\"}>Population ↑</MenuItem>\r\n        <MenuItem value={\"nameDes\"}>Name ↓</MenuItem>\r\n        <MenuItem value={\"nameAsc\"}>Name ↑</MenuItem>\r\n        <MenuItem value={\"regionDes\"}>Region ↓</MenuItem>\r\n        <MenuItem value={\"regionAsc\"}>Region ↑</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Sort;\r\n","import {\r\n  SORT_NAME_ASC,\r\n  SORT_NAME_DES,\r\n  SORT_POPULATION_ASC,\r\n  SORT_POPULATION_DES,\r\n  SORT_REGION_ASC,\r\n  SORT_REGION_DES,\r\n  NO_SORT,\r\n} from \"../../constant\";\r\n\r\nexport const noSort = () => {\r\n  return {\r\n    type: NO_SORT,\r\n    payload: \"\",\r\n  };\r\n};\r\nexport const sortNameAsc = () => {\r\n  return {\r\n    type: SORT_NAME_ASC,\r\n    payload: \"nameAsc\",\r\n  };\r\n};\r\nexport const sortNameDes = () => {\r\n  return {\r\n    type: SORT_NAME_DES,\r\n    payload: \"nameDes\",\r\n  };\r\n};\r\nexport const sortPopulationAsc = () => {\r\n  return {\r\n    type: SORT_POPULATION_ASC,\r\n    payload: \"populationAsc\",\r\n  };\r\n};\r\nexport const sortPopulationDes = () => {\r\n  return {\r\n    type: SORT_POPULATION_DES,\r\n    payload: \"populationDes\",\r\n  };\r\n};\r\nexport const sortRegionAsc = () => {\r\n  return {\r\n    type: SORT_REGION_ASC,\r\n    payload: \"regionAsc\",\r\n  };\r\n};\r\nexport const sortRegionDes = () => {\r\n  return {\r\n    type: SORT_REGION_DES,\r\n    payload: \"regionDes\",\r\n  };\r\n};\r\n\r\ntype NoSortAction = {type: typeof NO_SORT, payload: string}\r\ntype SortNameAscAction = {type: typeof SORT_NAME_ASC, payload: string}\r\ntype SortNameDesAction = {type: typeof SORT_NAME_DES, payload: string}\r\ntype SortPopulationAscAction = {type: typeof SORT_POPULATION_ASC, payload: string}\r\ntype SortPopulationDesAction = {type: typeof SORT_POPULATION_DES, payload: string}\r\ntype SortRegionAscAction ={type: typeof SORT_REGION_ASC, payload: string}\r\ntype SortRegionDesAction = {type: typeof SORT_REGION_DES, payload: string}\r\n\r\nexport type Actions = NoSortAction | SortNameAscAction | SortNameDesAction | SortPopulationAscAction | SortPopulationDesAction | SortRegionAscAction | SortRegionDesAction","import React, { useState } from \"react\";\r\n// imports components\r\nimport Header from \"../components/Header\";\r\nimport SearchCountry from \"../components/SearchCountry\";\r\nimport Index from \".././components/countries/Index\";\r\nimport Sort from \"../components/Sort\";\r\nimport Paper from \"@mui/material/Paper\";\r\n\r\nconst CountriesPage = () => {\r\n  const [inputText, setInputText] = useState <string>(\"\");\r\n  return (\r\n    <Paper sx={{ height: \"100vh\" }}>\r\n      <Header />\r\n      <SearchCountry setInputValue={setInputText} />\r\n      <Sort />\r\n      <Index inputText={inputText} />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CountriesPage;\r\n","import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { removeFavorite } from \"../../redux/favorite/action\";\r\nimport { InitialState } from \"../../redux/store\";\r\n//mui components\r\nimport Typography from \"@mui/material/Typography\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\nconst FavoriteList = () => {\r\n  const dispatch = useDispatch();\r\n  const favoriteList = useSelector((state: InitialState) => state.favorite.favorite);\r\n\r\n  console.log(favoriteList);\r\n  if (favoriteList.length === 0) {\r\n    return (\r\n      <Fragment>\r\n        <Typography variant=\"h3\">List of Favorite Countries</Typography>\r\n        <Typography>\r\n          Hi! There is no any favorite countries added yet.\r\n        </Typography>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Typography variant=\"h3\">List of Favorite Countries</Typography>\r\n      <Typography>\r\n        {favoriteList.map((favorite) => {\r\n          return (\r\n            <Grid\r\n              container\r\n              key={favorite}\r\n              direction=\"row\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              height={60}\r\n              className=\"favorite-container\"\r\n            >\r\n              <Grid item xs={8} fontSize=\"24px\">\r\n                <Link to={`/country/${favorite}`} className=\"favoriteLink\">\r\n                  {favorite}\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <IconButton onClick={() => dispatch(removeFavorite(favorite))}>\r\n                  <DeleteIcon color=\"error\" />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Typography>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default FavoriteList;\r\n","import React, { Fragment } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//mui components and style\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\n// components\r\nimport FavoriteList from \"./FavoriteList\";\r\n\r\nconst Favorite = () => {\r\n  const navigate = useNavigate();\r\n  return (\r\n    <Fragment>\r\n      <Card className=\"favorite\">\r\n        <CardContent>\r\n          <FavoriteList />\r\n        </CardContent>\r\n        <Box textAlign=\"center\">\r\n          <Button\r\n            size=\"large\"\r\n            onClick={() => {\r\n              navigate(-1);\r\n            }}\r\n          >\r\n            Go Back\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Favorite;\r\n","import Paper  from \"@mui/material/Paper\";\r\n// components\r\nimport Header from \"../components/Header\";\r\nimport Favorite from \"../components/favoriteCountriesList/Favorite\";\r\n\r\nconst FavoriteCountriesPage = () => {\r\n  return (\r\n    <Paper sx={{ height: \"100vh\" }}>\r\n      <Header />\r\n      <Favorite />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default FavoriteCountriesPage;\r\n","import { getCountriesList } from \"../../api/Api\";\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n  FETCHING_COUNTRIES,\r\n  FETCH_COUNTRIES_SUCCESS,\r\n  FETCH_COUNTRIES_ERROR,\r\n} from \"../../constant\";\r\nimport { Countries, Error } from \"../../types\";\r\n\r\nexport const fetchCountries = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: FETCHING_COUNTRIES,\r\n      });\r\n      const data = await getCountriesList(\"/all\");\r\n      dispatch(fetchCountriesSuccess(data));\r\n    } catch (error: any) {\r\n      dispatch(fetchCountriesError(error));\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchCountriesSuccess = (data: Countries[]) => {\r\n  return {\r\n    type: FETCH_COUNTRIES_SUCCESS,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const fetchCountriesError = (error: Error) => {\r\n  return {\r\n    type: FETCH_COUNTRIES_ERROR,\r\n    payload: error,\r\n    \r\n  };\r\n};\r\n\r\ntype FetchCountriesAction = {\r\n  type: typeof FETCHING_COUNTRIES,\r\n}\r\ntype FetchCountriesSuccessAction = {\r\n  type: typeof FETCH_COUNTRIES_SUCCESS,\r\n  payload: Countries[]\r\n}\r\ntype FetchCountriesErrorAction = {\r\n  type: typeof FETCH_COUNTRIES_ERROR,\r\n  payload: string\r\n}\r\n\r\nexport type Actions = FetchCountriesAction | FetchCountriesSuccessAction |FetchCountriesErrorAction","import React, { useState, createContext, useEffect, useMemo } from \"react\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./App.css\";\r\n\r\n//mui them\r\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\r\n\r\n// components\r\nimport CountryPage from \"./page/CountryPage\";\r\nimport CountriesPage from \"./page/CountriesPage\";\r\nimport FavoriteCountriesPage from \"./page/FavoriteCountriesPage\";\r\nimport { fetchCountries } from \"./redux/countries/action\";\r\nimport { PaletteMode } from \"@mui/material\";\r\n\r\n\r\nexport const ColorModeContext = createContext({ toggleColorMode: () => {} });\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState<PaletteMode>(\"light\");\r\n  const dispatch = useDispatch();\r\n\r\n  const colorMode = useMemo(\r\n    () => ({\r\n      toggleColorMode: () => {\r\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\r\n      },\r\n    }),\r\n    [],\r\n  );\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      mode, \r\n    },\r\n  });\r\n\r\n  // make API call on page load\r\n  useEffect(() => {\r\n    dispatch(fetchCountries());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n        <ColorModeContext.Provider value={colorMode}>\r\n      <ThemeProvider theme={theme}>\r\n        <Routes>\r\n          <Route path=\"/\" element={<CountriesPage />} />\r\n          <Route path=\"/country/:country\" element={<CountryPage />} />\r\n          <Route path=\"/favorites\" element={<FavoriteCountriesPage />} />\r\n        </Routes>\r\n      </ThemeProvider>\r\n    </ColorModeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  FETCHING_COUNTRIES,\r\n  FETCH_COUNTRIES_SUCCESS,\r\n  FETCH_COUNTRIES_ERROR,\r\n} from \"../../constant\";\r\n\r\nimport {Countries} from '../../types'\r\nimport {Actions} from './action'\r\n\r\ntype InitialState = {\r\n  countries:Countries[],\r\n  loading: boolean,\r\n  error: string\r\n}\r\n// initial state for countries\r\nconst initialState: InitialState = {\r\n  countries: [],\r\n  loading: false,\r\n  error: \"\",\r\n};\r\n\r\nconst reducer = (state = initialState, action: Actions): InitialState => {\r\n  // const { type, payload } = action;\r\n\r\n  switch (action.type) {\r\n    case FETCHING_COUNTRIES:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case FETCH_COUNTRIES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        countries: action.payload,\r\n        loading: false,\r\n      };\r\n    case FETCH_COUNTRIES_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import {\r\n  FETCHING_COUNTRY,\r\n  FETCH_COUNTRY_SUCCESS,\r\n  FETCH_COUNTRY_ERROR,\r\n} from \"../../constant\";\r\n\r\nimport {Country} from '../../types'\r\nimport {Actions} from './action'\r\n\r\ntype InitialState = {\r\n  country: Country[],\r\n  loading: boolean,\r\n  error: string,\r\n}\r\n\r\nconst initialState: InitialState = {\r\n  country: [],\r\n  loading: false,\r\n  error: \"\",\r\n};\r\nconst reducer = (state = initialState, action: Actions): InitialState => {\r\n  // const { type, payload } = action;\r\n\r\n  switch (action.type) {\r\n    case FETCHING_COUNTRY:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case FETCH_COUNTRY_SUCCESS:\r\n      return {\r\n        ...state,\r\n        country: action.payload,\r\n        loading: false,\r\n      };\r\n    case FETCH_COUNTRY_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        loading: false,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { ADD_FAVORITE, REMOVE_FAVORITE } from \"../../constant\";\r\nimport {Actions} from './action'\r\ntype InitialState = { favorite: string[]}\r\n\r\n\r\nconst initialState: InitialState = {\r\n  favorite: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action: Actions): InitialState => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case ADD_FAVORITE:\r\n      console.log(state);\r\n      return { ...state, favorite: [...state.favorite, payload] };\r\n\r\n    case REMOVE_FAVORITE:\r\n      const newfavorite = state.favorite.filter(\r\n        (country) => country !== payload\r\n      );\r\n      return { ...state, favorite: newfavorite };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import {\r\n  SORT_NAME_ASC,\r\n  SORT_NAME_DES,\r\n  SORT_POPULATION_ASC,\r\n  SORT_POPULATION_DES,\r\n  SORT_REGION_ASC,\r\n  SORT_REGION_DES,\r\n  NO_SORT,\r\n} from \"../../constant\";\r\nimport {Actions} from './action'\r\n\r\ntype InitialState = {sortBy: string}\r\n\r\nconst initialState: InitialState = {\r\n  sortBy: \"\",\r\n};\r\n\r\nconst reducer = (state = initialState, action: Actions): InitialState => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case NO_SORT:\r\n      return { ...state, sortBy: payload };\r\n    case SORT_NAME_ASC:\r\n      return { ...state, sortBy: payload };\r\n    case SORT_NAME_DES:\r\n      return { ...state, sortBy: payload };\r\n    case SORT_POPULATION_ASC:\r\n      return { ...state, sortBy: payload };\r\n    case SORT_POPULATION_DES:\r\n      return { ...state, sortBy: payload };\r\n    case SORT_REGION_ASC:\r\n      return { ...state, sortBy: payload };\r\n    case SORT_REGION_DES:\r\n      return { ...state, sortBy: payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\n//import reducers\r\nimport countriesReducer from \"./countries/reducer\";\r\nimport countryReducer from \"./country/reducer\";\r\nimport favoriteReducer from \"./favorite/reducer\";\r\nimport sortReducer from \"./sort/reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  countries: countriesReducer,\r\n  country: countryReducer,\r\n  favorite: favoriteReducer,\r\n  sort: sortReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport {Countries, Country} from '../types'\r\nimport rootReducer from \"./combineReducers\";\r\n\r\nexport type InitialState = {\r\n  sort: {sortBy: string},\r\n  favorite:{ favorite: string[]},\r\n  countries: {countries: Countries[], loading: boolean, error: string},\r\n  country: {country: Country[], loading: boolean, error: string}\r\n}\r\nconst initialState : InitialState = {\r\n  sort: { sortBy: \"\" },\r\n  favorite: { favorite: [] },\r\n  countries: { countries: [], loading: false, error: \"\" },\r\n  country: { country: [], loading: false, error: \"\" },\r\n};\r\nconst storeFactory = () => {\r\n  const favoriteLists = localStorage.getItem(\"favoriteCountries\");\r\n\r\n  if (favoriteLists) {\r\n    initialState.favorite.favorite = JSON.parse(favoriteLists);\r\n  }\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n  );\r\n  store.subscribe(() => {\r\n    const currentState = store.getState();\r\n\r\n    const favoriteList = currentState.favorite.favorite;\r\n    localStorage.setItem(\"favoriteCountries\", JSON.stringify(favoriteList));\r\n  });\r\n\r\n  return store;\r\n};\r\n\r\nexport default storeFactory();\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\n\r\n// import components\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport storeFactory from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={storeFactory}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}